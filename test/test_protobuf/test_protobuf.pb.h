// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_protobuf.proto

#ifndef PROTOBUF_test_5fprotobuf_2eproto__INCLUDED
#define PROTOBUF_test_5fprotobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_5fprotobuf_2eproto();
void protobuf_AssignDesc_test_5fprotobuf_2eproto();
void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

class NetParameter;
class LayerParameter;
class File_input_data_param;
class Shape;
class ConvolutionParameter;
class PoolingParameter;
class InnerproductParameter;
class Myblobs;
class Myblob;
class BlobProto;
class BlobShape;

// ===================================================================

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .LayerParameter layers = 12;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 12;
  inline const ::LayerParameter& layers(int index) const;
  inline ::LayerParameter* mutable_layers(int index);
  inline ::LayerParameter* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::LayerParameter >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::LayerParameter >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::LayerParameter > layers_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .File_input_data_param input_param = 5;
  inline bool has_input_param() const;
  inline void clear_input_param();
  static const int kInputParamFieldNumber = 5;
  inline const ::File_input_data_param& input_param() const;
  inline ::File_input_data_param* mutable_input_param();
  inline ::File_input_data_param* release_input_param();
  inline void set_allocated_input_param(::File_input_data_param* input_param);

  // optional .ConvolutionParameter conv_param = 6;
  inline bool has_conv_param() const;
  inline void clear_conv_param();
  static const int kConvParamFieldNumber = 6;
  inline const ::ConvolutionParameter& conv_param() const;
  inline ::ConvolutionParameter* mutable_conv_param();
  inline ::ConvolutionParameter* release_conv_param();
  inline void set_allocated_conv_param(::ConvolutionParameter* conv_param);

  // optional .PoolingParameter pooling_param = 7;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 7;
  inline const ::PoolingParameter& pooling_param() const;
  inline ::PoolingParameter* mutable_pooling_param();
  inline ::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::PoolingParameter* pooling_param);

  // optional .InnerproductParameter innerproduct_param = 8;
  inline bool has_innerproduct_param() const;
  inline void clear_innerproduct_param();
  static const int kInnerproductParamFieldNumber = 8;
  inline const ::InnerproductParameter& innerproduct_param() const;
  inline ::InnerproductParameter* mutable_innerproduct_param();
  inline ::InnerproductParameter* release_innerproduct_param();
  inline void set_allocated_innerproduct_param(::InnerproductParameter* innerproduct_param);

  // @@protoc_insertion_point(class_scope:LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_input_param();
  inline void clear_has_input_param();
  inline void set_has_conv_param();
  inline void clear_has_conv_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_innerproduct_param();
  inline void clear_has_innerproduct_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::File_input_data_param* input_param_;
  ::ConvolutionParameter* conv_param_;
  ::PoolingParameter* pooling_param_;
  ::InnerproductParameter* innerproduct_param_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class File_input_data_param : public ::google::protobuf::Message {
 public:
  File_input_data_param();
  virtual ~File_input_data_param();

  File_input_data_param(const File_input_data_param& from);

  inline File_input_data_param& operator=(const File_input_data_param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File_input_data_param& default_instance();

  void Swap(File_input_data_param* other);

  // implements Message ----------------------------------------------

  File_input_data_param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File_input_data_param& from);
  void MergeFrom(const File_input_data_param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Shape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::Shape& shape() const;
  inline ::Shape* mutable_shape();
  inline ::Shape* release_shape();
  inline void set_allocated_shape(::Shape* shape);

  // @@protoc_insertion_point(class_scope:File_input_data_param)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Shape* shape_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static File_input_data_param* default_instance_;
};
// -------------------------------------------------------------------

class Shape : public ::google::protobuf::Message {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  void Swap(Shape* other);

  // implements Message ----------------------------------------------

  Shape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dim = 1;
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int32 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int32 value);
  inline void add_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:Shape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dim_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static Shape* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::int32 num_output() const;
  inline void set_num_output(::google::protobuf::int32 value);

  // required int32 kernel = 2;
  inline bool has_kernel() const;
  inline void clear_kernel();
  static const int kKernelFieldNumber = 2;
  inline ::google::protobuf::int32 kernel() const;
  inline void set_kernel(::google::protobuf::int32 value);

  // required int32 stride = 3;
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 3;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // optional int32 pad = 4;
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 4;
  inline ::google::protobuf::int32 pad() const;
  inline void set_pad(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_kernel();
  inline void clear_has_kernel();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pad();
  inline void clear_has_pad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_output_;
  ::google::protobuf::int32 kernel_;
  ::google::protobuf::int32 stride_;
  ::google::protobuf::int32 pad_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  PoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pool = 1;
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 1;
  inline const ::std::string& pool() const;
  inline void set_pool(const ::std::string& value);
  inline void set_pool(const char* value);
  inline void set_pool(const char* value, size_t size);
  inline ::std::string* mutable_pool();
  inline ::std::string* release_pool();
  inline void set_allocated_pool(::std::string* pool);

  // required int32 kernel = 2;
  inline bool has_kernel() const;
  inline void clear_kernel();
  static const int kKernelFieldNumber = 2;
  inline ::google::protobuf::int32 kernel() const;
  inline void set_kernel(::google::protobuf::int32 value);

  // required int32 stride = 3;
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 3;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PoolingParameter)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_kernel();
  inline void clear_has_kernel();
  inline void set_has_stride();
  inline void clear_has_stride();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pool_;
  ::google::protobuf::int32 kernel_;
  ::google::protobuf::int32 stride_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerproductParameter : public ::google::protobuf::Message {
 public:
  InnerproductParameter();
  virtual ~InnerproductParameter();

  InnerproductParameter(const InnerproductParameter& from);

  inline InnerproductParameter& operator=(const InnerproductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerproductParameter& default_instance();

  void Swap(InnerproductParameter* other);

  // implements Message ----------------------------------------------

  InnerproductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerproductParameter& from);
  void MergeFrom(const InnerproductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::int32 num_output() const;
  inline void set_num_output(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InnerproductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_output_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static InnerproductParameter* default_instance_;
};
// -------------------------------------------------------------------

class Myblobs : public ::google::protobuf::Message {
 public:
  Myblobs();
  virtual ~Myblobs();

  Myblobs(const Myblobs& from);

  inline Myblobs& operator=(const Myblobs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Myblobs& default_instance();

  void Swap(Myblobs* other);

  // implements Message ----------------------------------------------

  Myblobs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Myblobs& from);
  void MergeFrom(const Myblobs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 blob_count = 1;
  inline bool has_blob_count() const;
  inline void clear_blob_count();
  static const int kBlobCountFieldNumber = 1;
  inline ::google::protobuf::int32 blob_count() const;
  inline void set_blob_count(::google::protobuf::int32 value);

  // repeated .Myblob blob = 2;
  inline int blob_size() const;
  inline void clear_blob();
  static const int kBlobFieldNumber = 2;
  inline const ::Myblob& blob(int index) const;
  inline ::Myblob* mutable_blob(int index);
  inline ::Myblob* add_blob();
  inline const ::google::protobuf::RepeatedPtrField< ::Myblob >&
      blob() const;
  inline ::google::protobuf::RepeatedPtrField< ::Myblob >*
      mutable_blob();

  // @@protoc_insertion_point(class_scope:Myblobs)
 private:
  inline void set_has_blob_count();
  inline void clear_has_blob_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Myblob > blob_;
  ::google::protobuf::int32 blob_count_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static Myblobs* default_instance_;
};
// -------------------------------------------------------------------

class Myblob : public ::google::protobuf::Message {
 public:
  Myblob();
  virtual ~Myblob();

  Myblob(const Myblob& from);

  inline Myblob& operator=(const Myblob& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Myblob& default_instance();

  void Swap(Myblob* other);

  // implements Message ----------------------------------------------

  Myblob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Myblob& from);
  void MergeFrom(const Myblob& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated float data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Myblob)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< float > data_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static Myblob* default_instance_;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BlobShape shape = 7;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 7;
  inline const ::BlobShape& shape() const;
  inline ::BlobShape* mutable_shape();
  inline ::BlobShape* release_shape();
  inline void set_allocated_shape(::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  inline int double_diff_size() const;
  inline void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  inline double double_diff(int index) const;
  inline void set_double_diff(int index, double value);
  inline void add_double_diff(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class BlobShape : public ::google::protobuf::Message {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:BlobShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_AddDesc_test_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_test_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_test_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// ===================================================================


// ===================================================================

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:NetParameter.name)
  return *name_;
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NetParameter.name)
  return name_;
}
inline ::std::string* NetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NetParameter.name)
}

// repeated .LayerParameter layers = 12;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:NetParameter.layers)
  return layers_.Get(index);
}
inline ::LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:NetParameter.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:NetParameter.layers)
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:NetParameter.layers)
  return &layers_;
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:LayerParameter.name)
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LayerParameter.name)
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:LayerParameter.type)
  return *type_;
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LayerParameter.type)
  return type_;
}
inline ::std::string* LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.top)
  return &top_;
}

// optional .File_input_data_param input_param = 5;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::File_input_data_param::Clear();
  clear_has_input_param();
}
inline const ::File_input_data_param& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
inline ::File_input_data_param* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) input_param_ = new ::File_input_data_param;
  // @@protoc_insertion_point(field_mutable:LayerParameter.input_param)
  return input_param_;
}
inline ::File_input_data_param* LayerParameter::release_input_param() {
  clear_has_input_param();
  ::File_input_data_param* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::File_input_data_param* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.input_param)
}

// optional .ConvolutionParameter conv_param = 6;
inline bool LayerParameter::has_conv_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_conv_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_conv_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_conv_param() {
  if (conv_param_ != NULL) conv_param_->::ConvolutionParameter::Clear();
  clear_has_conv_param();
}
inline const ::ConvolutionParameter& LayerParameter::conv_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.conv_param)
  return conv_param_ != NULL ? *conv_param_ : *default_instance_->conv_param_;
}
inline ::ConvolutionParameter* LayerParameter::mutable_conv_param() {
  set_has_conv_param();
  if (conv_param_ == NULL) conv_param_ = new ::ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.conv_param)
  return conv_param_;
}
inline ::ConvolutionParameter* LayerParameter::release_conv_param() {
  clear_has_conv_param();
  ::ConvolutionParameter* temp = conv_param_;
  conv_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_conv_param(::ConvolutionParameter* conv_param) {
  delete conv_param_;
  conv_param_ = conv_param;
  if (conv_param) {
    set_has_conv_param();
  } else {
    clear_has_conv_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.conv_param)
}

// optional .PoolingParameter pooling_param = 7;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::PoolingParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::PoolingParameter* LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.pooling_param)
}

// optional .InnerproductParameter innerproduct_param = 8;
inline bool LayerParameter::has_innerproduct_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_innerproduct_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerParameter::clear_has_innerproduct_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerParameter::clear_innerproduct_param() {
  if (innerproduct_param_ != NULL) innerproduct_param_->::InnerproductParameter::Clear();
  clear_has_innerproduct_param();
}
inline const ::InnerproductParameter& LayerParameter::innerproduct_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.innerproduct_param)
  return innerproduct_param_ != NULL ? *innerproduct_param_ : *default_instance_->innerproduct_param_;
}
inline ::InnerproductParameter* LayerParameter::mutable_innerproduct_param() {
  set_has_innerproduct_param();
  if (innerproduct_param_ == NULL) innerproduct_param_ = new ::InnerproductParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.innerproduct_param)
  return innerproduct_param_;
}
inline ::InnerproductParameter* LayerParameter::release_innerproduct_param() {
  clear_has_innerproduct_param();
  ::InnerproductParameter* temp = innerproduct_param_;
  innerproduct_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_innerproduct_param(::InnerproductParameter* innerproduct_param) {
  delete innerproduct_param_;
  innerproduct_param_ = innerproduct_param;
  if (innerproduct_param) {
    set_has_innerproduct_param();
  } else {
    clear_has_innerproduct_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.innerproduct_param)
}

// -------------------------------------------------------------------

// File_input_data_param

// optional .Shape shape = 1;
inline bool File_input_data_param::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File_input_data_param::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File_input_data_param::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File_input_data_param::clear_shape() {
  if (shape_ != NULL) shape_->::Shape::Clear();
  clear_has_shape();
}
inline const ::Shape& File_input_data_param::shape() const {
  // @@protoc_insertion_point(field_get:File_input_data_param.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::Shape* File_input_data_param::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::Shape;
  // @@protoc_insertion_point(field_mutable:File_input_data_param.shape)
  return shape_;
}
inline ::Shape* File_input_data_param::release_shape() {
  clear_has_shape();
  ::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void File_input_data_param::set_allocated_shape(::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:File_input_data_param.shape)
}

// -------------------------------------------------------------------

// Shape

// repeated int32 dim = 1;
inline int Shape::dim_size() const {
  return dim_.size();
}
inline void Shape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int32 Shape::dim(int index) const {
  // @@protoc_insertion_point(field_get:Shape.dim)
  return dim_.Get(index);
}
inline void Shape::set_dim(int index, ::google::protobuf::int32 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:Shape.dim)
}
inline void Shape::add_dim(::google::protobuf::int32 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:Shape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Shape::dim() const {
  // @@protoc_insertion_point(field_list:Shape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Shape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:Shape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// ConvolutionParameter

// required int32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0;
  clear_has_num_output();
}
inline ::google::protobuf::int32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::int32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.num_output)
}

// required int32 kernel = 2;
inline bool ConvolutionParameter::has_kernel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_kernel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_kernel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_kernel() {
  kernel_ = 0;
  clear_has_kernel();
}
inline ::google::protobuf::int32 ConvolutionParameter::kernel() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.kernel)
  return kernel_;
}
inline void ConvolutionParameter::set_kernel(::google::protobuf::int32 value) {
  set_has_kernel();
  kernel_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.kernel)
}

// required int32 stride = 3;
inline bool ConvolutionParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionParameter::clear_stride() {
  stride_ = 0;
  clear_has_stride();
}
inline ::google::protobuf::int32 ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.stride)
  return stride_;
}
inline void ConvolutionParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.stride)
}

// optional int32 pad = 4;
inline bool ConvolutionParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionParameter::clear_pad() {
  pad_ = 0;
  clear_has_pad();
}
inline ::google::protobuf::int32 ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.pad)
  return pad_;
}
inline void ConvolutionParameter::set_pad(::google::protobuf::int32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.pad)
}

// -------------------------------------------------------------------

// PoolingParameter

// required string pool = 1;
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  if (pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pool_->clear();
  }
  clear_has_pool();
}
inline const ::std::string& PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.pool)
  return *pool_;
}
inline void PoolingParameter::set_pool(const ::std::string& value) {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pool_ = new ::std::string;
  }
  pool_->assign(value);
  // @@protoc_insertion_point(field_set:PoolingParameter.pool)
}
inline void PoolingParameter::set_pool(const char* value) {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pool_ = new ::std::string;
  }
  pool_->assign(value);
  // @@protoc_insertion_point(field_set_char:PoolingParameter.pool)
}
inline void PoolingParameter::set_pool(const char* value, size_t size) {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pool_ = new ::std::string;
  }
  pool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PoolingParameter.pool)
}
inline ::std::string* PoolingParameter::mutable_pool() {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PoolingParameter.pool)
  return pool_;
}
inline ::std::string* PoolingParameter::release_pool() {
  clear_has_pool();
  if (pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pool_;
    pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PoolingParameter::set_allocated_pool(::std::string* pool) {
  if (pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pool_;
  }
  if (pool) {
    set_has_pool();
    pool_ = pool;
  } else {
    clear_has_pool();
    pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PoolingParameter.pool)
}

// required int32 kernel = 2;
inline bool PoolingParameter::has_kernel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_kernel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_kernel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_kernel() {
  kernel_ = 0;
  clear_has_kernel();
}
inline ::google::protobuf::int32 PoolingParameter::kernel() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.kernel)
  return kernel_;
}
inline void PoolingParameter::set_kernel(::google::protobuf::int32 value) {
  set_has_kernel();
  kernel_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.kernel)
}

// required int32 stride = 3;
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 0;
  clear_has_stride();
}
inline ::google::protobuf::int32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.stride)
}

// -------------------------------------------------------------------

// InnerproductParameter

// required int32 num_output = 1;
inline bool InnerproductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerproductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerproductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerproductParameter::clear_num_output() {
  num_output_ = 0;
  clear_has_num_output();
}
inline ::google::protobuf::int32 InnerproductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:InnerproductParameter.num_output)
  return num_output_;
}
inline void InnerproductParameter::set_num_output(::google::protobuf::int32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:InnerproductParameter.num_output)
}

// -------------------------------------------------------------------

// Myblobs

// optional int32 blob_count = 1;
inline bool Myblobs::has_blob_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Myblobs::set_has_blob_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Myblobs::clear_has_blob_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Myblobs::clear_blob_count() {
  blob_count_ = 0;
  clear_has_blob_count();
}
inline ::google::protobuf::int32 Myblobs::blob_count() const {
  // @@protoc_insertion_point(field_get:Myblobs.blob_count)
  return blob_count_;
}
inline void Myblobs::set_blob_count(::google::protobuf::int32 value) {
  set_has_blob_count();
  blob_count_ = value;
  // @@protoc_insertion_point(field_set:Myblobs.blob_count)
}

// repeated .Myblob blob = 2;
inline int Myblobs::blob_size() const {
  return blob_.size();
}
inline void Myblobs::clear_blob() {
  blob_.Clear();
}
inline const ::Myblob& Myblobs::blob(int index) const {
  // @@protoc_insertion_point(field_get:Myblobs.blob)
  return blob_.Get(index);
}
inline ::Myblob* Myblobs::mutable_blob(int index) {
  // @@protoc_insertion_point(field_mutable:Myblobs.blob)
  return blob_.Mutable(index);
}
inline ::Myblob* Myblobs::add_blob() {
  // @@protoc_insertion_point(field_add:Myblobs.blob)
  return blob_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Myblob >&
Myblobs::blob() const {
  // @@protoc_insertion_point(field_list:Myblobs.blob)
  return blob_;
}
inline ::google::protobuf::RepeatedPtrField< ::Myblob >*
Myblobs::mutable_blob() {
  // @@protoc_insertion_point(field_mutable_list:Myblobs.blob)
  return &blob_;
}

// -------------------------------------------------------------------

// Myblob

// optional string name = 1;
inline bool Myblob::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Myblob::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Myblob::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Myblob::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Myblob::name() const {
  // @@protoc_insertion_point(field_get:Myblob.name)
  return *name_;
}
inline void Myblob::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Myblob.name)
}
inline void Myblob::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Myblob.name)
}
inline void Myblob::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Myblob.name)
}
inline ::std::string* Myblob::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Myblob.name)
  return name_;
}
inline ::std::string* Myblob::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Myblob::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Myblob.name)
}

// repeated float data = 2;
inline int Myblob::data_size() const {
  return data_.size();
}
inline void Myblob::clear_data() {
  data_.Clear();
}
inline float Myblob::data(int index) const {
  // @@protoc_insertion_point(field_get:Myblob.data)
  return data_.Get(index);
}
inline void Myblob::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Myblob.data)
}
inline void Myblob::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:Myblob.data)
}
inline const ::google::protobuf::RepeatedField< float >&
Myblob::data() const {
  // @@protoc_insertion_point(field_list:Myblob.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
Myblob::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Myblob.data)
  return &data_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::BlobShape::Clear();
  clear_has_shape();
}
inline const ::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:BlobProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::BlobShape;
  // @@protoc_insertion_point(field_mutable:BlobProto.shape)
  return shape_;
}
inline ::BlobShape* BlobProto::release_shape() {
  clear_has_shape();
  ::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:BlobProto.width)
}

// -------------------------------------------------------------------

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:BlobShape.dim)
  return &dim_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_5fprotobuf_2eproto__INCLUDED
